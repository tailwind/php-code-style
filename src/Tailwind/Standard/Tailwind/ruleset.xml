<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="tailwind">
    <description>
        Rules for Tailwind's PHP codebase. If you disagree talk with Janell she is the goddess of all things PHP and will have the correct answer.
        List of rules: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Customisable-Sniff-Properties
    </description>

    <!--We use some WordPress rules, so we autoload those in-->
    <autoload>./vendor/wp-coding-standards/wpcs/WordPress/PHPCSAliases.php</autoload>

    <!-- ========================= -->
    <!-- ======== Arrays ========= -->
    <!-- ========================= -->
    <!-- Covers rule: Note the comma after the last array item: this is recommended. -->
    <rule ref="WordPress.Arrays.CommaAfterArrayItem"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.Arrays.ArrayIndent" />

    <!-- Align the double arrows. -->
    <rule ref="WordPress.Arrays.MultipleStatementAlignment" />

    <!-- ========================= -->
    <!-- ======== Strings ======== -->
    <!-- ========================= -->
    <!-- Covers rule: Use single and double quotes when appropriate.
     If you're not evaluating anything in the string, use single quotes. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule>

    <!-- ========================= -->
    <!-- ======= Classes ========= -->
    <!-- ========================= -->
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Classes.PropertyDeclaration">
        <exclude name="PSR2.Classes.PropertyDeclaration.Underscore"/>
    </rule>

    <!-- ========================= -->
    <!-- ====== Namespace ======== -->
    <!-- ========================= -->
    <rule ref="PSR2.Namespaces.UseDeclaration"/>
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>

    <!-- ========================= -->
    <!-- ====== Functions ======== -->
    <!-- ========================= -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="sizeof" value="count"/>
                <element key="delete" value="unset"/>
                <element key="print" value="echo"/>
                <element key="ppx" value="null"/>
                <element key="pjx" value="null"/>
                <element key="pp" value="null"/>
                <element key="pj" value="null"/>
                <element key="dd" value="null"/>
            </property>
        </properties>
    </rule>

    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>

    <!--Ensure the default values only are set after required ones-->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!--Make sure there is one space between function definitions in classes-->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"/>
        </properties>
    </rule>

    <!--Checks that there are no blank lines after a functions opening brace
        and that opening braces are on the new line.-->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- ========================= -->
    <!-- ==== Code Analysis ====== -->
    <!-- ========================= -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- ========================= -->
    <!-- ========= Files ========= -->
    <!-- ========================= -->
    <rule ref="Generic.Files.LineEndings"/>

    <!-- ========================= -->
    <!-- ====== Whitespace ======= -->
    <!-- ========================= -->
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.MultipleStatementAlignment"/>

    <!--Finally settling the tabs vs spaces argument-->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!--Ensure brackets are right-->
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>

    <!--Ensure that cast statements have no spacing issues-->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <!--There should be a single space between language constructs-->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <!--Ensure there is a single space after scope keywords.-->
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <!--Ensures that there is no whitespace before a semicolon.-->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!--Ensure there is no closing tag, which might cause issues-->
    <rule ref="Zend.Files.ClosingTag"/>

    <!-- ========================= -->
    <!-- ======= Constants ======= -->
    <!-- ========================= -->
    <!--Ours should be shouting, true/false/null should be lowercase-->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>


    <!--Ensure function calls from php are all lowercase-->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>

</ruleset>
